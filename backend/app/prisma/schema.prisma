generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}


model User {
  id        String      @id @default(uuid())
  username  String
  email     String   @unique
  hashedPassword  String @map("hashed_password")
  roles   UserRole[] @default([USER])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  matchs     UserMatchScore[]    @relation("user_score")

  @@map("user")
}

enum UserRole {
  ADMIN
  USER
  NIKITA
  @@map("user_role")
}


enum MatchStatus {
  WAITING
  ONGOING
  FINISHED
  @@map("match_status")
}
model Match {
  id        String   @id @default(uuid())
  startTime DateTime @map("start_time")
  endTime   DateTime? @map("end_time")
  cooldownEndTime DateTime @map("cooldown_end_time")
  maxPlayers Int     @map("max_players") @default(10)
  status    MatchStatus   @default(WAITING)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  scores    UserMatchScore[]    @relation("match_scores")

  @@map("match")
}

model UserMatchScore {
  id        String   @id @default(uuid())
  score     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  match      Match     @relation("match_scores", fields: [matchId], references: [id], onDelete: Cascade)
  matchId    String   @map("match_id")

  user      User     @relation("user_score", fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@index([userId], name: "idx_user_id")
  @@index([matchId], name: "idx_match_id")
  @@index([userId, matchId], name: "idx_user_match_id")

  @@map("match_score")
}
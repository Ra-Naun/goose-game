# Отключаем демон, чтобы nginx мог работать в фореграунде (важно для docker)
daemon off;

# Пользователь и число воркеров
user nginx;
worker_processes auto;
pid /run/nginx.pid;


#error_log  logs/error.log;
error_log stderr notice;
#error_log  logs/error.log  info;


# Настройка событий
events {
    worker_connections 10240;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # формат лога для продакшена
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    'rt=$request_time uct=$upstream_connect_time '
                    'uht=$upstream_header_time urt=$upstream_response_time';

    # Логирование
    error_log /var/log/nginx/error.log notice;
    access_log /dev/stdout combined;
    access_log /dev/stdout main;

    # Оптимизация передачи файлов
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # Размер хеша для типов
    types_hash_max_size 2048;

    # Сжатие gzip
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Базовые заголовки безопасности
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    # При необходимости добавить Content-Security-Policy и Strict-Transport-Security (для SSL)

    # Определение upstream блоков с балансировкой нагрузки
    upstream backend_upstream {
        ip_hash;
        least_conn;
        server backend-test-instance-1:3000 max_fails=3 fail_timeout=30s;
        server backend-test-instance-2:3000 max_fails=3 fail_timeout=30s;
        server backend-test-instance-3:3000 max_fails=3 fail_timeout=30s;
    }


    server {
        listen 80 default_server;
        server_name localhost;

        location /api/ {
            proxy_pass http://backend_upstream/;

            proxy_http_version 1.1;

            # Поддержка WebSocket
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Таймауты для длительных соединений WebSocket
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
            proxy_cache_bypass $http_upgrade;
        }

        location /pgadmin/ {
            proxy_pass http://pgadmin:80/pgadmin/;
            proxy_http_version 1.1;

            proxy_set_header X-Script-Name /pgadmin;
            proxy_redirect off;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }


        location /vault/ {
                proxy_pass http://vault:8200/;
                proxy_redirect off;

                proxy_http_version 1.1;

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

        location / {
            root /usr/share/website/dist/;
            index index.html;

            try_files $uri $uri/ /index.html;
        }
    }
}